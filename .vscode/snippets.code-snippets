{
	"22_test_update": {
		"prefix": "22_test_update",
		"description": "",
		"scope": "",
		"body": [
			"- test_policy"
		]
	},
	"21_test_policy": {
		"prefix": "21_test_policy",
		"description": "",
		"scope": "",
		"body": [
			"  test_policy:",
			"    name: \"Test Terraform Configuration For Deployment\"",
			"    runs-on: ubuntu-latest",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v3",
			"",
			"      - name: Upload Configuration",
			"        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0",
			"        id: apply-upload",
			"        with:",
			"          workspace: app-${{ github.ref_name }}",
			"          directory: ${{ env.CONFIG_DIRECTORY }}",
			"      ",
			"      - name: Download TFC Plan",
			"        run: |",
			"          wget  https://github.com/nicholasjackson/tfc-plan/releases/download/v0.0.3/binary-linux-amd64",
			"          mv ./binary-linux-amd64 /usr/local/bin/tfc-plan",
			"          chmod +x /usr/local/bin/tfc-plan",
			"        ",
			"      - name: Download Conftest",
			"        run: |",
			"          LATEST_VERSION=$(wget -O - \"https://api.github.com/repos/open-policy-agent/conftest/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/' | cut -c 2-)",
			"          wget \"https://github.com/open-policy-agent/conftest/releases/download/v${LATEST_VERSION}/conftest_${LATEST_VERSION}_Linux_x86_64.tar.gz\"",
			"          tar xzf conftest_\\${LATEST_VERSION}_Linux_x86_64.tar.gz",
			"          sudo mv conftest /usr/local/bin",
			"",
			"      - name: Get Plan And Output JSON",
			"        id: plan-run",
			"        run: |",
			"          tfc-plan --out terraform/gcp/app/app-plan.json",
			"        env:",
			"          TFC_ORG: ${{ secrets.TF_CLOUD_ORG }} ",
			"          TFC_WORKSPACE: app-${{ github.ref_name }}",
			"          TFC_TOKEN: ${{ secrets.TF_API_TOKEN }} ",
			"",
			"      - name: Run Conftest",
			"        run: |",
			"          conftest test -p terraform/gcp/app/policy terraform/gcp/app/app-plan.json"
		]
	},
	"20_container_test": {
		"prefix": "20_container_test",
		"description": "",
		"scope": "",
		"body": [
			"deny[msg] {",
			"  images := [image | ",
			"    image := deployments[_].values.spec[_].template[_].spec[_].container[_]",
			"    image.image == \"hashicraft/minecraft:v1.20.1-fabric\"",
			"  ]",
			"",
			"  count(images) != 1",
			"",
			"  msg := sprintf(\"the deployment should have a container using the minecraft image: %v\",[images])",
			"}"
		]
	},
	"19_deployments_test": {
		"prefix": "19_deployment_test",
		"description": "",
		"scope": "",
		"body": [
			"deny[msg] {",
			"  count(deployments) != 1",
			"  msg := sprintf(\"there should be a deployment called minecraft: %v\",[deployments])",
			"}"
		]
	},
	"18_deployments": {
		"prefix": "18_deployments",
		"description": "",
		"scope": "",
		"body": [
			"deployments := [deploy |",
			"  deploy := input.planned_values.root_module.resources[_]",
			"  deploy.type == \"kubernetes_deployment\"",
			"  deploy.name == \"minecraft\"",
			"]"
		]
	},
	"17_run_apply": {
		"prefix": "17_run_apply",
		"description": "",
		"scope": "",
		"body": [
			"  apply_config:",
			"    name: \"Deploy Application\"",
			"    needs: ",
			"      - build_world",
			"    runs-on: ubuntu-latest",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v3",
			"",
			"      - name: Create the World checksum",
			"        run: |",
			"          echo \"${{needs.build_world.outputs.world_checksum}}\" >> ${{ env.CONFIG_DIRECTORY }}/checksum.txt",
			"      ",
			"      - name: Upload Configuration",
			"        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0",
			"        id: apply-upload",
			"        with:",
			"          workspace: app-${{ github.ref_name }}",
			"          directory: ${{ env.CONFIG_DIRECTORY }}",
			"",
			"      - name: Create Apply Run",
			"        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0",
			"        id: apply-run",
			"        with:",
			"          workspace: app-${{ github.ref_name }}",
			"          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}",
			"",
			"      - name: Apply",
			"        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0",
			"        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable",
			"        id: apply",
			"        with:",
			"          run: ${{ steps.apply-run.outputs.run_id }}",
			"          comment: \"Apply Run from GitHub Actions CI ${{ github.sha }}\""
		]
	},
	"16_build_world": {
		"prefix": "16_build_world",
		"description": "",
		"scope": "",
		"body": [
			"  build_world:",
			"    name: \"Build World\"",
			"    needs: test_world",
			"    runs-on: ubuntu-latest",
			"    permissions:",
			"      contents: write",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v3",
			"",
			"      - name: Build the updated world",
			"        run: |",
			"          tar -C $(pwd)/world -czf ./world.tar.gz ./",
			"      ",
			"      - name: Update release",
			"        uses: johnwbyrd/update-release@v1.0.0",
			"        with:",
			"          token: ${{ secrets.GITHUB_TOKEN }}",
			"          files: ./world.tar.gz",
			"      ",
			"      - name: Generate the checksum",
			"        id: checksum",
			"        run: |",
			"          echo \"checksum=$(shasum -a 512 ./world.tar.gz)\" >> \"$GITHUB_OUTPUT\"",
			"",
			"    outputs:",
			"      world_checksum: ${{ steps.checksum.outputs.checksum }} "
		]
	},
	"15_test_job": {
		"prefix": "15_test_job",
		"description": "",
		"scope": "",
		"body": [
			"  test_world:",
			"    name: \"Test World\"",
			"    runs-on: ubuntu-latest",
			"    permissions:",
			"      contents: write",
			"    steps:",
			"      - name: Checkout",
			"        uses: actions/checkout@v3",
			"",
			"      - name: Set up Go",
			"        uses: actions/setup-go@v4",
			"        with:",
			"          go-version: '1.20'",
			"",
			"      - name: Test",
			"        run: |",
			"          cd tests",
			"          go test -v ./..."
		]
	},
	"14_cloudflare": {
		"prefix": "14_cloudflare",
		"description": "",
		"scope": "",
		"body": [
			"resource \"cloudflare_record\" \"minecraft\" {",
			"  zone_id = var.cloudflare_zone_id",
			"  name    = \"minecraft-${var.environment}\"",
			"  value   = google_compute_address.minecraft.address",
			"  type    = \"A\"",
			"  ttl     = 3600",
			"  proxied = false",
			"}"
		]
	},
	"13_output": {
		"prefix": "13_output",
		"description": "",
		"scope": "",
		"body": [
			"output \"minecraft_ip\" {",
			"  value = google_compute_address.minecraft.address",
			"}"
		]
	},
	"12_services": {
		"prefix": "12_services",
		"description": "",
		"scope": "",
		"body": [
			"resource \"kubernetes_service\" \"minecraft\" {",
			"  metadata {",
			"    name = \"minecraft-${var.environment}\"",
			"  }",
			"",
			"  spec {",
			"    selector = {",
			"      app = \"minecraft-${var.environment}\"",
			"    }",
			"",
			"    session_affinity = \"ClientIP\"",
			"    port {",
			"      protocol    = \"TCP\"",
			"      port        = 25565",
			"      target_port = 25565",
			"    }",
			"    type             = \"LoadBalancer\"",
			"    load_balancer_ip = google_compute_address.minecraft.address",
			"  }",
			"}",
			"",
			"resource \"kubernetes_service\" \"bluemap\" {",
			"  count = var.environment == \"prod\" ? 0 : 1",
			"",
			"  metadata {",
			"    name = \"bluemap-${var.environment}\"",
			"  }",
			"",
			"  spec {",
			"    selector = {",
			"      app = \"minecraft-${var.environment}\"",
			"    }",
			"",
			"    session_affinity = \"ClientIP\"",
			"    port {",
			"      protocol    = \"TCP\"",
			"      port        = 80",
			"      target_port = 8100",
			"    }",
			"    type             = \"LoadBalancer\"",
			"    load_balancer_ip = google_compute_address.minecraft.address",
			"  }",
			"}"
		]
	},
	"11_ip_address": {
		"prefix": "11_ip_address",
		"description": "",
		"scope": "",
		"body": [
			"resource \"google_compute_address\" \"minecraft\" {",
			"  name   = \"minecraft-${var.environment}\"",
			"  region = var.location",
			"}"
		]
	},
	"10_volume": {
		"prefix": "10_volume",
		"description": "",
		"scope": "",
		"body": [
			"",
			"        volume {",
			"          name = \"config\"",
			"",
			"          config_map {",
			"            default_mode = \"0666\"",
			"            name         = kubernetes_config_map.config.metadata.0.name",
			"",
			"            dynamic \"items\" {",
			"              for_each = local.config_files",
			"",
			"              content {",
			"                key  = items.key",
			"                path = items.key",
			"              }",
			"            }",
			"",
			"          }",
			"        }"
		]
	},
	"9_volume_mount": {
		"prefix": "9_volume_mount",
		"description": "",
		"scope": "",
		"body": [
			"          dynamic \"volume_mount\" {",
			"            for_each = local.config_files",
			"",
			"            content {",
			"              name = \"config\"",
			"",
			"              mount_path = \"/minecraft/config/${replace(volume_mount.key, \"_\", \"/\")}\"",
			"              sub_path   = volume_mount.key",
			"              read_only  = false",
			"            }",
			"          }"
		]
	},
	"8_environment_vars": {
		"prefix": "8_environment_vars",
		"description": "",
		"scope": "",
		"body": [
			"          env {",
			"            name  = \"WORLD_CHECKSUM\"",
			"            value = file(\"./checksum.txt\")",
			"          }",
			"",
			"          env {",
			"            name  = \"MODS_BACKUP\"",
			"            value = \"https://github.com/nicholasjackson/demo-terraform-minecraft/releases/download/mods/mods.tar.gz\"",
			"          }",
			"",
			"          env {",
			"            name  = \"WORLD_BACKUP\"",
			"            value = \"https://github.com/nicholasjackson/demo-terraform-minecraft/releases/download/${var.environment}/world.tar.gz\"",
			"          }",
			"",
			"          env {",
			"            name  = \"VAULT_ADDR\"",
			"            value = data.terraform_remote_state.hcp.outputs.vault_public_addr",
			"          }",
			"",
			"          env {",
			"            name  = \"VAULT_TOKEN\"",
			"            value = data.terraform_remote_state.hcp.outputs.vault_admin_token",
			"          }",
			"         ",
			"          env {",
			"            name  = \"VAULT_NAMESPACE\"",
			"            value = \"admin\"",
			"          }",
			"",
			"          env {",
			"            name  = \"HASHICRAFT_env\"",
			"            value = var.environment",
			"          }",
			"",
			"          env {",
			"            name  = \"SPAWN_ANIMALS\"",
			"            value = \"true\"",
			"          }",
			"",
			"          env {",
			"            name  = \"SPAWN_NPCS\"",
			"            value = \"true\"",
			"          }"
		]
	},
	"7_container": {
		"prefix": "7_container",
		"description": "",
		"scope": "",
		"body": [
			"        container {",
			"          image = \"hashicraft/minecraft:v1.20.1-fabric\"",
			"          name  = \"minecraft\"",
			"",
			"          resources {",
			"            limits = {",
			"              cpu    = \"1\"",
			"              memory = \"2048Mi\"",
			"            }",
			"            requests = {",
			"              cpu    = \"1\"",
			"              memory = \"2048Mi\"",
			"            }",
			"          }",
			"        }"
		]
	},
	"6_deployment_outline": {
		"prefix": "6_deployment_outline",
		"description": "",
		"scope": "",
		"body": [
			"resource \"kubernetes_deployment\" \"minecraft\" {",
			"  metadata {",
			"    name = \"minecraft-${var.environment}\"",
			"  }",
			"",
			"  spec {",
			"    replicas = 1",
			"",
			"    selector {",
			"      match_labels = {",
			"        app = \"minecraft-${var.environment}\"",
			"      }",
			"    }",
			"",
			"    strategy {",
			"      type = \"Recreate\"",
			"    }",
			"",
			"    template {",
			"      metadata {",
			"        labels = {",
			"          app = \"minecraft-${var.environment}\"",
			"        }",
			"      }",
			"",
			"      spec {",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"5_config_map": {
		"prefix": "5_config_map",
		"description": "",
		"scope": "",
		"body": [
			"resource \"kubernetes_config_map\" \"config\" {",
			"  metadata {",
			"    name = \"minecraft-config-${var.environment}\"",
			"  }",
			"",
			"  data = local.config_files",
			"}"
		]
	},
	"4_provider_kubernetes": {
		"prefix": "4_provider_kubernetes",
		"description": "",
		"scope": "",
		"body": [
			"provider \"kubernetes\" {",
			"  host  = \"https://${data.google_container_cluster.my_cluster.endpoint}\"",
			"  token = data.google_client_config.provider.access_token",
			"  cluster_ca_certificate = base64decode(",
			"    data.google_container_cluster.my_cluster.master_auth[0].cluster_ca_certificate,",
			"  )",
			"}"
		]
	},
	"3_google_datasource": {
		"prefix": "3_google_datasource",
		"description": "",
		"scope": "",
		"body": [
			"data \"google_client_config\" \"provider\" {}",
			"",
			"data \"google_container_cluster\" \"my_cluster\" {",
			"  name     = var.cluster",
			"  location = var.location",
			"}"
		]
	},
	"2_provider_google": {
		"prefix": "2_provider_google",
		"description": "",
		"scope": "",
		"body": [
			"provider \"google\" {",
			"  project = var.project",
			"  region  = var.location",
			"}"
		]
	},
	"1_terraform_block": {
		"prefix": "1_terraform_block",
		"description": "Main terraform block for the application",
		"scope": "",
		"body": [
			"terraform {",
			"  cloud {",
			"    organization = \"HashiCraft\"",
			"",
			"    workspaces {",
			"      name = \"app-dev\"",
			"    }",
			"  }",
			"",
			"  required_providers {",
			"    google = {",
			"      source  = \"hashicorp/google\"",
			"      version = \"4.79.0\"",
			"    }",
			"",
			"    kubernetes = {",
			"      source  = \"hashicorp/kubernetes\"",
			"      version = \"2.23.0\"",
			"    }",
			"",
			"    cloudflare = {",
			"      source  = \"cloudflare/cloudflare\"",
			"      version = \"~> 4.0\"",
			"    }",
			"  }",
			"}"
		]
	}
	// Place your terraform-minecraft workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}