{
	"8_controller_secret": {
		"prefix": "8_controller_secret",
		"description": "",
		"scope": "",
		"body": [
			"resource \"kubernetes_manifest\" \"vault-secret\" {",
			"  manifest = {",
			"    apiVersion = \"secrets.hashicorp.com/v1beta1\"",
			"    kind       = \"VaultDynamicSecret\"",
			"",
			"    metadata = {",
			"      name      = \"minecraft-db\"",
			"      namespace = \"default\"",
			"    }",
			"",
			"    spec = {",
			"      namespace = local.vault_namespace",
			"      mount     = vault_database_secrets_mount.minecraft.path",
			"      path      = \"creds/writer\"",
			"",
			"      destination = {",
			"        create = false",
			"        name   = kubernetes_secret.db_writer.metadata.0.name",
			"      }",
			"",
			"      vaultAuthRef = kubernetes_manifest.vault-auth.manifest.metadata.name",
			"    }",
			"  }",
			"}"
		]
	},
	"7_controller_auth": {
		"prefix": "7_controller_auth",
		"description": "",
		"scope": "",
		"body": [
			"resource \"kubernetes_manifest\" \"vault-auth\" {",
			"  manifest = {",
			"    apiVersion = \"secrets.hashicorp.com/v1beta1\"",
			"    kind       = \"VaultAuth\"",
			"",
			"    metadata = {",
			"      name      = \"dev-auth\"",
			"      namespace = \"default\"",
			"    }",
			"",
			"    spec = {",
			"      vaultConnectionRef = \"default\"",
			"      method             = \"kubernetes\"",
			"      mount              = \"kubernetes\"",
			"      namespace          = local.vault_namespace",
			"      allowedNamespaces  = [\"*\"]",
			"",
			"      kubernetes = {",
			"        role           = vault_kubernetes_auth_backend_role.dev.role_name",
			"        serviceAccount = kubernetes_service_account.minecraft.metadata.0.name",
			"      }",
			"    }",
			"  }",
			"}"
		]
	},
	"6_secrets_auth": {
		"prefix": "6_secrets_auth",
		"description": "",
		"scope": "",
		"body": [
			"# configure the role that the app will use to authenticate to vault",
			"resource \"vault_kubernetes_auth_backend_role\" \"dev\" {",
			"  backend                          = var.vault_kubernetes_path",
			"  role_name                        = \"minecraft\"",
			"  bound_service_account_namespaces = [\"default\"]",
			"  bound_service_account_names      = [kubernetes_service_account.minecraft.metadata.0.name]",
			"  token_ttl                        = 3600",
			"  token_policies                   = [\"default\", vault_policy.db_secrets.name]",
			"}"
		]
	},
	"5_secrets_policy": {
		"prefix": "5_secrets_policy",
		"description": "",
		"scope": "",
		"body": [
			"# create a policy that allows the app to read the database credentials",
			"resource \"vault_policy\" \"db_secrets\" {",
			"  name = \"db_secrets\"",
			"",
			"  policy = <<-EOT",
			"  path \"${vault_database_secrets_mount.minecraft.path}/creds/writer\" {",
			"    capabilities = [\"read\"]",
			"  }",
			"  EOT",
			"}"
		]
	},
	"4_role_writer": {
		"prefix": "4_role_writer",
		"description": "",
		"scope": "",
		"body": [
			"resource \"vault_database_secret_backend_role\" \"writer\" {",
			"  depends_on = [kubernetes_job.sql_import]",
			"",
			"  name    = \"writer\"",
			"  backend = vault_database_secrets_mount.minecraft.path",
			"  db_name = vault_database_secrets_mount.minecraft.postgresql[0].name",
			"  creation_statements = [",
			"    \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\",",
			"    \"GRANT SELECT ON counter TO \\\"{{name}}\\\";\",",
			"    \"GRANT INSERT ON counter TO \\\"{{name}}\\\";\",",
			"    \"GRANT UPDATE ON counter TO \\\"{{name}}\\\";\",",
			"    \"GRANT DELETE ON counter TO \\\"{{name}}\\\";\",",
			"  ]",
			"}"
		]
	},
	"3_role_reader": {
		"prefix": "3_role_reader",
		"description": "",
		"scope": "",
		"body": [
			"// the following two roles can only be created after the counter table is generated",
			"// from the sql import",
			"resource \"vault_database_secret_backend_role\" \"reader\" {",
			"  depends_on = [kubernetes_job.sql_import]",
			"",
			"  name    = \"reader\"",
			"  backend = vault_database_secrets_mount.minecraft.path",
			"  db_name = vault_database_secrets_mount.minecraft.postgresql[0].name",
			"  creation_statements = [",
			"    \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\",",
			"    \"GRANT SELECT ON counter TO \\\"{{name}}\\\";\",",
			"  ]",
			"}"
		]
	},
	"2_role_import": {
		"prefix": "2_role_import",
		"description": "",
		"scope": "",
		"body": [
			"# Short lived user for importing data",
			"resource \"vault_database_secret_backend_role\" \"importer\" {",
			"  name    = \"importer\"",
			"  backend = vault_database_secrets_mount.minecraft.path",
			"  db_name = vault_database_secrets_mount.minecraft.postgresql[0].name",
			"  creation_statements = [",
			"    \"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\",",
			"    \"GRANT ${azurerm_postgresql_server.minecraft.administrator_login} TO \\\"{{name}}\\\";\"",
			"  ]",
			"",
			"  default_ttl = \"100\"",
			"  max_ttl     = \"100\"",
			"}"
		]
	},
	"1_database_mount": {
		"prefix": "1_database_mount",
		"description": "",
		"scope": "",
		"body": [
			"resource \"vault_database_secrets_mount\" \"minecraft\" {",
			"  depends_on = [ azurerm_postgresql_firewall_rule.minecraft ]",
			"",
			"  path = \"database/minecraft_${var.environment}\"",
			"",
			"  postgresql {",
			"    name              = \"minecraft\"",
			"    username          = \"${azurerm_postgresql_server.minecraft.administrator_login}@${azurerm_postgresql_server.minecraft.name}\"",
			"    password          = random_password.root_password.result",
			"    connection_url    = \"postgresql://{{username}}:{{password}}@${azurerm_postgresql_server.minecraft.fqdn}:5432/${azurerm_postgresql_database.minecraft.name}\"",
			"    verify_connection = true",
			"    allowed_roles = [",
			"      \"reader\",",
			"      \"writer\",",
			"      \"importer\"",
			"    ]",
			"  }",
			"}"
		]
	}
	// Place your demo-terraform-minecraft workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}